# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nvwCxKNfFyCFhaibZuTQ4S7D0RIzEVz8
"""

# Deixei prints para ilustrar o passo a passo do método xD
# Código por: João Guilherme Sales de Oliveira (20190034570)
# Disciplina: Cálculo Numérico

def interpolarPolinomioGregorio_Newton(m,x,y,z): #número de pontos, abcissas, ordenadas, valor a inteprolar
    # r é o valor interpolado (parâmetro de saída)
    Dely = []
    i = 1
    k = 1
    
    #o dely precisa ser de tamanho m
    for i in range(0,m): Dely.append(0)
    ###
    
    
    for i in range(0,m):
        Dely[i] = y[i]
    
    
    #####Diferenças Finitas
    k = 1  #nesse caso precisa começar com 1 mesmo
    
    for k in range(k,m):
        for i in reversed( range(k,m) ):  ## o código sugere k+1 mas deu erro
            print('\n')
            print("i = " + str(i))
            
            
            print("Dely[i] = " + str( Dely[i] ) )
            print("Dely[i-1] = " + str( Dely[i-1] ) )
            
           
            Dely[i] = Dely[i] - Dely[i-1]
            
            print("Dely[i] = " + str(Dely[i]) )
            
    #####Diferenças Finitas
    
    ##### Avaliação do Polinômio pelo processo de Horner
    
    u = (z - x[0])/(x[1]-x[0])
    r = Dely[m-1] #m-1 porque eu estou começando de 0
    
    
    for i in reversed(range(1,m)):
        print("---------PROCESSO HORNER-----------")
        print("\n")
        print("r = " + str(r))
        
        
        
        r = r* ( (u-i+1) / i) + Dely[i-1]  
    
        
    return r

m=3
x = [110,120,130]
y = [2.0410,2.0790,2.1140]
z = 115

resul = interpolarPolinomioGregorio_Newton(m,x,y,z)
print("O resultado final foi = " + str(resul))

